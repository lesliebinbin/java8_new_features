/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package au.edu.uq;

public class App {
    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }

    public String getGreeting() {
        // new SwingTest().frameDemo01();
        /*
         * Demo01 d01 = new Demo01(); d01.demo(); d01.myTest(() ->
         * System.out.println("Hello lambda...")); MyInterface myInterface = () ->
         * System.out.println("Hello interfaces free..");
         * System.out.println("--------------------"); d01.myTest(myInterface);
         * myInterface.test02();
         */
        /*
         * Demo02 d2 = new Demo02(); d2.demo02(); d2.demo04(); StringComparator
         * stringComparator = new StringComparator(); stringComparator.sortDemo();
         * FunctionTest fTest = new FunctionTest(); System.out.println(fTest.compute(1,
         * value -> 2 * value)); System.out.println(fTest.compute(2, value -> 5 +
         * value)); System.out.println(fTest.compute(3, value -> value * value));
         * System.out.println(fTest.convert(4, value -> value + " Hello world"));
         * System.out.println("----------------------------"); Function<Integer,
         * Integer> function = value -> value * 2; System.out.println(fTest.compute(33,
         * function));
         */
        /*
         * FunctionTest02 fTest = new FunctionTest02(); Function<Integer, Integer> f1 =
         * x -> x * 3; Function<Integer, Integer> f2 = x -> x * x;
         * System.out.println(fTest.compute(2, f1, f2));
         * System.out.println(fTest.compute2(2, f1, f2));
         */
        /*
         * BiFunctionDemo01 biFunc = new BiFunctionDemo01();
         * System.out.println(biFunc.compute01(12_00, 4, (x, y) -> x + y));
         * System.out.println(biFunc.compute01(12_00, 4, (x, y) -> x - y));
         * System.out.println(biFunc.compute01(12_00, 4, (x, y) -> x * y));
         * System.out.println(biFunc.compute01(12_00, 4, (x, y) -> x / y));
         * System.out.println(biFunc.compute02(12, 4, (x, y) -> x + y, x -> x * x));
         */
        // new PersonTest().demo();
        // new PredicateTest2().demo();
        // new SupplierTest().demo();
        // new StudentTest().demo();
        // new BinaryOperatorTest().demo();
        // new OptionalTest2().demo();
        new MethodReferencesTest().demo();
        System.out.println("I think git is awesome..");
        return "Hello world.";
    }
}
